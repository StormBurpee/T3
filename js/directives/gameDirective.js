// Generated by CoffeeScript 1.6.3
(function() {
  app.directive('ttt', function() {
    return {
      scope: {
        subgame: '=',
        game: '=',
        bid: '@'
      },
      restrict: 'E',
      templateUrl: 'views/board.html',
      link: function(scope, element, attrs) {
        var checkWinRow, checkWinner, fullBoard;
        scope.your_turn = function() {
          if (scope.game.local) {
            return true;
          }
          return scope.game.turn.toString() === localStorage.player;
        };
        scope.toggle_turn = function() {
          return scope.game.turn = scope.game.turn === 1 ? 2 : 1;
        };
        scope.toggle_board_turn = function(square) {
          if (fullBoard(scope.game["board" + square].board)) {
            return scope.game.board_turn = -1;
          } else {
            return scope.game.board_turn = square;
          }
        };
        scope.playable = function() {
          var _ref, _ref1, _ref2;
          return ((_ref = scope.game) != null ? _ref.board_turn : void 0) === -1 || ((_ref1 = scope.game) != null ? (_ref2 = _ref1.board_turn) != null ? _ref2.toString() : void 0 : void 0) === scope.bid;
        };
        scope.move = function(square) {
          if (scope.your_turn() && scope.playable()) {
            if (!scope.subgame.board[square]) {
              scope.subgame.board[square] = scope.game.turn;
              scope.toggle_turn();
              return scope.toggle_board_turn(square);
            }
          }
        };
        scope.$watch('subgame.board', function() {
          var _ref;
          if (((_ref = scope.game) != null ? _ref.started : void 0) === 'started') {
            if (!scope.subgame.winner) {
              scope.subgame.winner = checkWinner(scope.subgame.board);
            }
            if (!scope.subgame.winner && fullBoard(scope.subgame.board)) {
              return scope.subgame.tie = true;
            }
          }
        }, true);
        fullBoard = function(board) {
          return board != null ? board.every(function(square) {
            return square;
          }) : void 0;
        };
        checkWinner = function(board) {
          return checkWinRow(board[0], board[1], board[2]) || checkWinRow(board[3], board[4], board[5]) || checkWinRow(board[6], board[7], board[8]) || checkWinRow(board[0], board[3], board[6]) || checkWinRow(board[1], board[4], board[7]) || checkWinRow(board[2], board[5], board[8]) || checkWinRow(board[0], board[4], board[8]) || checkWinRow(board[2], board[4], board[6]);
        };
        return checkWinRow = function(a, b, c) {
          if ((a === b && b === c)) {
            if (a !== 0) {
              return a;
            }
          }
        };
      }
    };
  });

}).call(this);
